# -*- coding: utf-8 -*-
"""Image and Video Recognition

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rLf0WT-ztUE1Tg6x57xtRkeInLqttJVW

1. First we need to enable GPU from Edit->Notebook settings->Hardware accelerator-> GPU

2. Then we need to Clone and Build Darknet:
"""

# clone darknet repo
!git clone https://github.com/AlexeyAB/darknet

# Commented out IPython magic to ensure Python compatibility.
# change makefile to have GPU and OPENCV enabled
# %cd darknet
!sed -i 's/OPENCV=0/OPENCV=1/' Makefile
!sed -i 's/GPU=0/GPU=1/' Makefile
!sed -i 's/CUDNN=0/CUDNN=1/' Makefile
!sed -i 's/CUDNN_HALF=0/CUDNN_HALF=1/' Makefile

# verify CUDA
!/usr/local/cuda/bin/nvcc --version

# make darknet (builds darknet so that you can then use the darknet executable file to run or train object detectors)
!make

"""3. Download pre-trained YOLOv4 weights-

YOLOv4 has been trained already on the coco dataset which has 80 classes that it can predict. We want to grab these pretrained weights so that we can run YOLOv4 on these pretrained classes and get detections.
"""

!wget https://github.com/AlexeyAB/darknet/releases/download/darknet_yolo_v3_optimal/yolov4.weights

"""4. Define Helper Functions"""

# Commented out IPython magic to ensure Python compatibility.
# define helper functions
def imShow(path):
  import cv2
  import matplotlib.pyplot as plt
#   %matplotlib inline

  image = cv2.imread(path)
  height, width = image.shape[:2]
  resized_image = cv2.resize(image,(3*width, 3*height), interpolation = cv2.INTER_CUBIC)

  fig = plt.gcf()
  fig.set_size_inches(18, 10)
  plt.axis("off")
  plt.imshow(cv2.cvtColor(resized_image, cv2.COLOR_BGR2RGB))
  plt.show()

# use this to upload files
def upload():
  from google.colab import files
  uploaded = files.upload() 
  for name, data in uploaded.items():
    with open(name, 'wb') as f:
      f.write(data)
      print ('saved file', name)

# use this to download a file  
def download(path):
  from google.colab import files
  files.download(path)

"""Image Recognition"""

# Commented out IPython magic to ensure Python compatibility.
# trying out the upload helper function
# %cd ..
upload()
# %cd darknet

# running darknet with YOLOv4 with the test image
!./darknet detector test cfg/coco.data cfg/yolov4.cfg yolov4.weights ../test_img6.jpeg
imShow('predictions.jpg')

"""Video Recognition"""

from google.colab import drive
drive.mount('/content/gdrive')

# upload the video of your choosing
upload()

!./darknet detector demo cfg/coco.data cfg/yolov4.cfg yolov4.weights -dont_show fast_video.mp4 -i 0 -out_filename results.avi

# to download the video with the detections made
download('results.avi')